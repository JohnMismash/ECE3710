`timescale 1ns / 1ps

////////////////////////////////////////////////////////////////////////////////
// Company:
// Engineer:
//
// Create Date:   14:25:01 08/30/2011
// Design Name:   alu
// Module Name:   C:/Documents and Settings/Administrator/ALU/alutest.v
// Project Name:  ALU
// Target Device:
// Tool versions:
// Description:
//
// Verilog Test Fixture created by ISE for module: alu
//
// Dependencies:
//
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
//
////////////////////////////////////////////////////////////////////////////////

module fibonacci_test;

	// Inputs
	reg [15:0] RegEnable; //This was an input, but changed to wire for FSM
	reg [3:0] reg_select;
	reg [3:0] imm_val;
	reg [7:0] opcode;
	reg Clocks, reset;
	
	// Outputs
	wire [15:0] r15;

	// Instantiate the Unit Under Test (UUT)
	RegFile uut (
		.Clocks(Clocks),
		.reset(reset),
		.RegEnable(RegEnable),
		.reg_select(reg_select),
		.imm_val(imm_val),
		.opcode(opcode),
		.r15(r15),
	);

	initial begin
//			$monitor("A: %0d, B: %0d, C: %0d, Flags[1:0]:
//%b, time:%0d", A, B, C, Flags[1:0], $time );
//Instead of the $display stmt in the loop, you could use just this
//monitor statement which is executed everytime there is an event on any
//signal in the argument list.

		// Initialize Inputs
		Clocks = 0;
		reset = 0;
		RegEnable = 0;
		reg_select = 0;
		imm_val = 0;
		opcode = 0;
		
		// Instruction 1 - Load 1 into R15
		imm_val = 1;
		RegEnable[15] = 1;
		opcode[0] = 1;
		reg_select = 4'b1111;
		#20;

		// Wait 100 ns for global reset to finish
/*****
		// One vector-by-vector case simulation
		#10;
	        Opcode = 2'b11;
		A = 4'b0010; B = 4'b0011;
		#10
		A = 4'b1111; B = 4'b 1110;
		//$display("A: %b, B: %b, C:%b, Flags[1:0]: %b, time:%d", A, B, C, Flags[1:0], $time);
****/
		//Random simulation
//		for( i = 0; i< 32; i = i+ 1)
//		begin
//			#10
//			Opcode = 0;
//			A = i;
//			B = 3*i;
//
//			if (C != A + B)
//				$display("Error: %0d + %0d != %0d", A, B, C);
			//B = 2 + i;
			//$display("A: %0d, B: %0d, C: %0d, Flags[1:0]: %b, time:%0d", A, B, C, Flags[1:0], $time );
//		end


	end

endmodule
